{"/home/travis/build/npmtest/node-npmtest-p2p/test.js":"/* istanbul instrument in package npmtest_p2p */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-p2p/lib.npmtest_p2p.js":"/* istanbul instrument in package npmtest_p2p */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_p2p = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_p2p = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-p2p/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-p2p && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_p2p */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_p2p\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_p2p.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_p2p.rollup.js'] =\n            local.assetsDict['/assets.npmtest_p2p.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_p2p.__dirname + '/lib.npmtest_p2p.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/p2p.js":"'use strict';\n\nconst http = require('http'),\n    https = require('https');\n\nconst _ = require('lodash'),\n    flaschenpost = require('flaschenpost'),\n    parse = require('parse-duration'),\n    Timer = require('timer2');\n\nconst Peer = require('./Peer');\n\nconst logger = flaschenpost.getLogger();\n\nconst p2p = {};\n\np2p.peer = function (options) {\n  if (!options) {\n    throw new Error('Options are missing.');\n  }\n  if (!options.privateKey && options.certificate) {\n    throw new Error('Private key is missing.');\n  }\n  if (options.privateKey && !options.certificate) {\n    throw new Error('Certificate is missing.');\n  }\n\n  const useHttps = !!options.privateKey && !!options.certificate;\n\n  options.protocol = useHttps ? 'https' : 'http';\n\n  const peer = new Peer(options);\n\n  const serviceInterval = parse(options.serviceInterval || '30s'),\n      wobbleFactor = serviceInterval * 0.5;\n\n  if (useHttps) {\n    https.createServer({\n      key: options.privateKey,\n      cert: options.certificate\n    }, peer.app).listen(peer.self.port, () => {\n      logger.info('Server started.', {\n        endpoint: peer.self,\n        status: peer.status()\n      });\n    });\n  } else {\n    http.createServer(peer.app).listen(peer.self.port, () => {\n      logger.info('Server started.', {\n        endpoint: peer.self,\n        status: peer.status()\n      });\n    });\n  }\n\n  [ 'stabilize', 'fix-successors', 'fix-fingers', 'fix-predecessor' ].forEach(fn => {\n    new Timer(serviceInterval, { variation: wobbleFactor }).on('tick', () => {\n      peer.remote(peer.self).run(fn, () => {});\n    });\n  });\n\n  new Timer(serviceInterval, { variation: wobbleFactor }).on('tick', () => {\n    peer.remote(peer.self).run('join', _.sample(peer.wellKnownPeers.get()), () => {});\n  });\n\n  return peer;\n};\n\nmodule.exports = p2p;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/Peer.js":"'use strict';\n\nconst path = require('path'),\n    url = require('url'),\n    util = require('util');\n\nconst bodyParser = require('body-parser'),\n    eventEmitter2 = require('eventemitter2'),\n    express = require('express'),\n    flaschenpost = require('flaschenpost'),\n    request = require('request'),\n    requireAll = require('require-all'),\n    sha1 = require('sha1');\n\nconst Endpoint = require('./Endpoint'),\n    errors = require('./errors'),\n    interval = require('./interval'),\n    WellKnownPeers = require('./WellKnownPeers');\n\nconst EventEmitter2 = eventEmitter2.EventEmitter2;\n\nconst routes = requireAll(path.join(__dirname, 'routes'));\n\nconst logger = flaschenpost.getLogger();\n\nconst Peer = function (options) {\n  if (!options) {\n    throw new Error('Options are missing.');\n  }\n\n  EventEmitter2.call(this, {\n    wildcard: true,\n    delimiter: '::'\n  });\n\n  this.protocol = options.protocol || 'https';\n  this.self = new Endpoint(options);\n  this.metadata = options.metadata || {};\n\n  this.successor = new Endpoint(options);\n  this.predecessor = new Endpoint(options);\n  this.successors = [];\n  this.fingers = [];\n\n  this.wellKnownPeers = new WellKnownPeers();\n  this.wellKnownPeers.add(this.self);\n  this.wellKnownPeers.add(options.wellKnownPeers || []);\n\n  this.handle = {};\n\n  this.app = express();\n\n  this.app.use(bodyParser.json());\n\n  this.app.post('/self', routes.self(this));\n  this.app.post('/status', routes.status(this));\n  this.app.post('/metadata', routes.metadata(this));\n\n  this.app.post('/successor', routes.successor(this));\n  this.app.post('/successors', routes.successors(this));\n  this.app.post('/predecessor', routes.predecessor(this));\n\n  this.app.post('/closest-preceding-finger', routes.closestPrecedingFinger(this));\n  this.app.post('/find-predecessor', routes.findPredecessor(this));\n  this.app.post('/find-successor', routes.findSuccessor(this));\n\n  this.app.post('/join', routes.join(this));\n\n  this.app.post('/notify', routes.notify(this));\n  this.app.post('/stabilize', routes.stabilize(this));\n  this.app.post('/fix-fingers', routes.fixFingers(this));\n  this.app.post('/fix-successors', routes.fixSuccessors(this));\n  this.app.post('/fix-predecessor', routes.fixPredecessor(this));\n\n  this.app.post('/handle/:action', routes.handle(this));\n};\n\nutil.inherits(Peer, EventEmitter2);\n\nPeer.prototype.remote = function (target) {\n  if (!target) {\n    throw new Error('Target is missing.');\n  }\n  if (!target.host) {\n    throw new Error('Host is missing.');\n  }\n  if (!target.port) {\n    throw new Error('Port is missing.');\n  }\n\n  return {\n    run: (fn, args, callback) => {\n      if (!fn) {\n        throw new Error('Function is missing.');\n      }\n      if (!args) {\n        throw new Error('Callback is missing.');\n      }\n      if (!callback) {\n        callback = args;\n        args = {};\n      }\n\n      const targetAsUrl = url.format({\n        protocol: this.protocol,\n        hostname: target.host,\n        port: target.port,\n        pathname: fn\n      });\n\n      request.post(targetAsUrl, {\n        body: args,\n        json: true,\n        keepAlive: true\n      }, (err, res, body) => {\n        if (err) {\n          return callback(err);\n        }\n\n        res.resume();\n\n        if (res.statusCode !== 200) {\n          const errorSummary = {\n            url: targetAsUrl,\n            args,\n            statusCode: res.statusCode,\n            body: (body || '').trim('\\n')\n          };\n\n          logger.warn('Failed to call a remote function.', errorSummary);\n          return callback(new errors.UnexpectedStatusCode(`Unexpected status code ${res.statusCode} when running ${fn}.`, errorSummary));\n        }\n\n        callback(null, body);\n      });\n    }\n  };\n};\n\nPeer.prototype.setSuccessor = function (successor) {\n  if (!successor) {\n    throw new Error('Successor is missing.');\n  }\n\n  const fromStatus = this.status();\n\n  this.successor = new Endpoint({\n    host: successor.host,\n    port: successor.port\n  });\n  this.emit('environment::successor', this.successor);\n\n  const toStatus = this.status();\n\n  if (toStatus !== fromStatus) {\n    this.emit(`status::${toStatus}`, {\n      from: fromStatus,\n      to: toStatus\n    });\n  }\n};\n\nPeer.prototype.setPredecessor = function (predecessor) {\n  const fromStatus = this.status();\n\n  if (predecessor) {\n    this.predecessor = new Endpoint({\n      host: predecessor.host,\n      port: predecessor.port\n    });\n  } else {\n    this.predecessor = undefined;\n  }\n  this.emit('environment::predecessor', this.predecessor);\n\n  const toStatus = this.status();\n\n  if (toStatus !== fromStatus) {\n    this.emit(`status::${toStatus}`, {\n      from: fromStatus,\n      to: toStatus\n    });\n  }\n};\n\nPeer.prototype.status = function () {\n  if (!this.predecessor) {\n    return 'unbalanced';\n  }\n\n  if ((this.self.id === this.successor.id) && (this.self.id === this.predecessor.id)) {\n    return 'lonely';\n  }\n\n  if ((this.self.id !== this.successor.id) && (this.self.id !== this.predecessor.id)) {\n    return 'joined';\n  }\n\n  return 'unbalanced';\n};\n\nPeer.prototype.fixSuccessor = function () {\n  this.successors.shift();\n\n  if (this.successors.length === 0) {\n    return this.setSuccessor({\n      host: this.self.host,\n      port: this.self.port\n    });\n  }\n\n  this.setSuccessor({\n    host: this.successors[0].host,\n    port: this.successors[0].port\n  });\n};\n\nPeer.prototype.getEndpointFor = function (value, callback) {\n  if (!value) {\n    throw new Error('Value is missing.');\n  }\n  if (!callback) {\n    throw new Error('Callback is missing.');\n  }\n\n  this.remote(this.self).run('find-successor', {\n    id: sha1(value)\n  }, (errFindSuccessor, successor) => {\n    if (errFindSuccessor) {\n      return callback(errFindSuccessor);\n    }\n\n    this.remote(successor).run('metadata', (errMetadata, metadata) => {\n      if (errMetadata) {\n        return callback(errMetadata);\n      }\n\n      callback(null, successor, metadata);\n    });\n  });\n};\n\nPeer.prototype.isResponsibleFor = function (value) {\n  if (!value) {\n    throw new Error('Value is missing.');\n  }\n  if (!this.predecessor) {\n    return false;\n  }\n\n  const id = sha1(value);\n\n  return interval({\n    left: this.predecessor.id,\n    right: this.self.id,\n    type: 'leftopen'\n  }).contains(id);\n};\n\nmodule.exports = Peer;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/Endpoint.js":"'use strict';\n\nconst sha1 = require('sha1');\n\nconst Endpoint = function (options) {\n  if (!options) {\n    throw new Error('Options are missing.');\n  }\n  if (!options.host) {\n    throw new Error('Host is missing.');\n  }\n  if (!options.port) {\n    throw new Error('Port is missing.');\n  }\n\n  this.host = options.host;\n  this.port = options.port;\n  this.id = sha1(`${this.host}:${this.port}`);\n};\n\nmodule.exports = Endpoint;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/errors.js":"'use strict';\n\nconst defekt = require('defekt');\n\nconst errors = defekt([\n  'InvalidOperation',\n  'UnexpectedStatusCode'\n]);\n\nmodule.exports = errors;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/interval.js":"'use strict';\n\nconst errors = require('./errors');\n\nconst interval = function (options) {\n  if (!options) {\n    throw new Error('Options are missing.');\n  }\n  if (options.left === undefined) {\n    throw new Error('Left is missing.');\n  }\n  if (options.right === undefined) {\n    throw new Error('Right is missing.');\n  }\n  if (options.type === undefined) {\n    throw new Error('Type is missing.');\n  }\n\n  const left = options.left,\n      right = options.right;\n\n  switch (options.type) {\n    case 'open':\n      return {\n        contains (id) {\n          /* eslint-disable no-nested-ternary */\n          return left < right ? left < id && id < right :\n                 left > right ? left < id || id < right :\n                 left !== id;\n          /* eslint-enable no-nested-ternary */\n        }\n      };\n    case 'leftopen':\n      return {\n        contains (id) {\n          /* eslint-disable no-nested-ternary */\n          return left < right ? left < id && id <= right :\n                 left > right ? left < id || id <= right :\n                 true;\n          /* eslint-enable no-nested-ternary */\n        }\n      };\n    default:\n      throw new errors.InvalidOperation(`Unknown interval type ${options.type}.`);\n  }\n};\n\nmodule.exports = interval;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/WellKnownPeers.js":"'use strict';\n\nconst _ = require('lodash');\n\nconst WellKnownPeers = function () {\n  this.peers = [];\n};\n\nWellKnownPeers.prototype.get = function () {\n  return _.cloneDeep(this.peers);\n};\n\nWellKnownPeers.prototype.add = function (newPeers) {\n  newPeers = _.flatten([ newPeers ]);\n\n  for (let i = 0; i < newPeers.length; i++) {\n    const newPeer = newPeers[i];\n\n    if (!_.find(this.peers, newPeer)) {\n      this.peers.push({ host: newPeer.host, port: newPeer.port });\n    }\n  }\n};\n\nmodule.exports = WellKnownPeers;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/closestPrecedingFinger.js":"'use strict';\n\nconst interval = require('../interval');\n\nconst closestPrecedingFinger = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    const id = req.body.id;\n\n    if (!id) {\n      return res.sendStatus(400);\n    }\n\n    for (let i = 160; i >= 1; i--) {\n      const finger = peer.fingers[i];\n\n      if (!finger) {\n        continue;\n      }\n\n      if (interval({ left: peer.self.id, right: id, type: 'open' }).contains(finger.id)) {\n        return res.send(finger);\n      }\n    }\n\n    res.send(peer.self);\n  };\n};\n\nmodule.exports = closestPrecedingFinger;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/findPredecessor.js":"'use strict';\n\nconst Endpoint = require('../Endpoint'),\n    interval = require('../interval');\n\nconst findPredecessor = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    const id = req.body.id;\n\n    if (!id) {\n      return res.sendStatus(400);\n    }\n\n    let possiblePredecessor = new Endpoint(peer.self);\n\n    const findPredecessorRecursive = () => {\n      peer.remote(possiblePredecessor).run('successor', (err, successor) => {\n        if (err) {\n          return res.sendStatus(500);\n        }\n\n        if (interval({ left: possiblePredecessor.id, right: successor.id, type: 'leftopen' }).contains(id)) {\n          return res.send(possiblePredecessor);\n        }\n\n        peer.remote(possiblePredecessor).run('closest-preceding-finger', { id }, (errClosestPrecedingFinger, closestPrecedingFinger) => {\n          if (errClosestPrecedingFinger) {\n            return res.sendStatus(500);\n          }\n\n          possiblePredecessor = new Endpoint(closestPrecedingFinger);\n          findPredecessorRecursive();\n        });\n      });\n    };\n\n    findPredecessorRecursive();\n  };\n};\n\nmodule.exports = findPredecessor;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/findSuccessor.js":"'use strict';\n\nconst interval = require('../interval');\n\nconst findSuccessor = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    const id = req.body.id;\n\n    if (!id) {\n      return res.sendStatus(400);\n    }\n\n    if (interval({ left: peer.self.id, right: peer.successor.id, type: 'leftopen' }).contains(id)) {\n      return res.send(peer.successor);\n    }\n\n    peer.remote(peer.self).run('find-predecessor', { id }, (err, predecessor) => {\n      if (err) {\n        return res.sendStatus(500);\n      }\n\n      peer.remote(predecessor).run('successor', (errSuccessor, successor) => {\n        if (errSuccessor) {\n          return res.sendStatus(500);\n        }\n\n        peer.wellKnownPeers.add(successor);\n        res.send(successor);\n      });\n    });\n  };\n};\n\nmodule.exports = findSuccessor;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/fixFingers.js":"'use strict';\n\nconst random = require('random-int');\n\nconst Endpoint = require('../Endpoint'),\n    hex = require('../hex');\n\nconst fixFingers = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    const i = random(2, 160),\n        id = hex.add(peer.self.id, hex.pow2x(i - 1));\n\n    peer.remote(peer.self).run('find-successor', { id }, (err, successor) => {\n      if (err) {\n        return res.sendStatus(500);\n      }\n\n      peer.fingers[i] = new Endpoint({\n        host: successor.host,\n        port: successor.port\n      });\n\n      res.sendStatus(200);\n    });\n  };\n};\n\nmodule.exports = fixFingers;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/hex.js":"'use strict';\n\nconst hex = {};\n\n// The following line can be removed when ES7 is available.\nrequire('string.prototype.padleft').shim();\n\nhex.add = function (left, right) {\n  if (left.length < right.length) {\n    left = left.padLeft(right.length, '0');\n  } else if (right.length < left.length) {\n    right = right.padLeft(left.length, '0');\n  }\n\n  let carry = 0,\n      sum = '';\n\n  for (let i = left.length - 1; i >= 0; i--) {\n    const digit = parseInt(left[i], 16) + parseInt(right[i], 16) + carry;\n\n    carry = digit >> 4;\n    sum = (digit & 15).toString(16) + sum;\n  }\n\n  return sum;\n};\n\nhex.pow2x = function (exponent) {\n  const moduloExponent = exponent % 4,\n      overflow = Math.floor(exponent / 4);\n\n  const power = Math.pow(2, moduloExponent) + '0'.repeat(overflow);\n\n  return power;\n};\n\nmodule.exports = hex;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/fixPredecessor.js":"'use strict';\n\nconst fixPredecessor = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    if (!peer.predecessor) {\n      return res.sendStatus(200);\n    }\n\n    peer.remote(peer.predecessor).run('self', err => {\n      if (err) {\n        peer.setPredecessor(undefined);\n      }\n\n      res.sendStatus(200);\n    });\n  };\n};\n\nmodule.exports = fixPredecessor;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/fixSuccessors.js":"'use strict';\n\nconst Endpoint = require('../Endpoint');\n\nconst fixSuccessors = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    peer.remote(peer.successor).run('successors', (err, successors) => {\n      if (err) {\n        peer.fixSuccessor();\n        return res.sendStatus(500);\n      }\n\n      successors.unshift(new Endpoint(peer.successor));\n      peer.successors = successors;\n\n      res.sendStatus(200);\n    });\n  };\n};\n\nmodule.exports = fixSuccessors;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/handle.js":"'use strict';\n\nconst handle = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    const action = req.params.action;\n\n    if (!peer.handle[action]) {\n      return res.sendStatus(404);\n    }\n\n    peer.handle[action](req.body, (err, result) => {\n      if (err) {\n        return res.sendStatus(500);\n      }\n      return res.send(result || {});\n    });\n  };\n};\n\nmodule.exports = handle;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/join.js":"'use strict';\n\nconst join = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    const host = req.body.host,\n        port = req.body.port;\n\n    if (!host) {\n      return res.sendStatus(400);\n    }\n    if (!port) {\n      return res.sendStatus(400);\n    }\n\n    if (host === peer.self.host && port === peer.self.port) {\n      return res.sendStatus(200);\n    }\n    if (peer.status() !== 'lonely') {\n      return res.sendStatus(200);\n    }\n\n    peer.remote({ host, port }).run('find-successor', { id: peer.self.id }, (err, successor) => {\n      if (err) {\n        return res.sendStatus(500);\n      }\n\n      peer.setPredecessor(undefined);\n      peer.setSuccessor(successor);\n\n      res.sendStatus(200);\n    });\n  };\n};\n\nmodule.exports = join;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/metadata.js":"'use strict';\n\nconst metadata = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    res.send(peer.metadata);\n  };\n};\n\nmodule.exports = metadata;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/notify.js":"'use strict';\n\nconst Endpoint = require('../Endpoint'),\n    interval = require('../interval');\n\nconst notify = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    const host = req.body.host,\n        port = req.body.port;\n\n    if (!host) {\n      return res.sendStatus(400);\n    }\n    if (!port) {\n      return res.sendStatus(400);\n    }\n\n    const possiblePredecessor = new Endpoint({ host, port });\n\n    if (!peer.predecessor || interval({\n      left: peer.predecessor.id,\n      right: peer.self.id,\n      type: 'open'\n    }).contains(possiblePredecessor.id)) {\n      peer.setPredecessor(possiblePredecessor);\n    }\n\n    res.sendStatus(200);\n  };\n};\n\nmodule.exports = notify;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/predecessor.js":"'use strict';\n\nconst predecessor = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    res.send(peer.predecessor);\n  };\n};\n\nmodule.exports = predecessor;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/self.js":"'use strict';\n\nconst self = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    res.send(peer.self);\n  };\n};\n\nmodule.exports = self;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/stabilize.js":"'use strict';\n\nconst interval = require('../interval');\n\nconst stabilize = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    peer.remote(peer.successor).run('predecessor', (err, predecessor) => {\n      if (err) {\n        peer.fixSuccessor();\n        return res.sendStatus(500);\n      }\n\n      if (\n        (predecessor) &&\n        (interval({ left: peer.self.id, right: peer.successor.id, type: 'open' }).contains(predecessor.id))\n      ) {\n        peer.setSuccessor({\n          host: predecessor.host,\n          port: predecessor.port\n        });\n      }\n\n      peer.remote(peer.successor).run('notify', peer.self, errNotify => {\n        if (errNotify) {\n          peer.fixSuccessor();\n          return res.sendStatus(500);\n        }\n\n        res.sendStatus(200);\n      });\n    });\n  };\n};\n\nmodule.exports = stabilize;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/status.js":"'use strict';\n\nconst status = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    res.send({\n      status: peer.status()\n    });\n  };\n};\n\nmodule.exports = status;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/successor.js":"'use strict';\n\nconst successor = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    res.send(peer.successor);\n  };\n};\n\nmodule.exports = successor;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/lib/routes/successors.js":"'use strict';\n\nconst successors = function (peer) {\n  if (!peer) {\n    throw new Error('Peer is missing.');\n  }\n\n  return (req, res) => {\n    res.send(peer.successors.slice(0, 16));\n  };\n};\n\nmodule.exports = successors;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/Gruntfile.js":"'use strict';\n\nconst tourism = require('tourism');\n\nmodule.exports = tourism({\n  analyse: {\n    server: [ '**/*.js', '!node_modules/**/*.js', '!coverage/**/*.js' ],\n    options: {\n      server: {\n        language: 'es2015'\n      }\n    }\n  },\n  test: {\n    server: [ 'test/**/*Tests.js' ]\n  },\n  shell: {\n    integration: [\n      'docker build -t thenativeweb/p2p-test .',\n      'mocha --async-only --bail --colors --recursive --reporter spec --ui tdd integration'\n    ].join(' && ')\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/integration/join-parallel.js":"'use strict';\n\nconst assert = require('assertthat'),\n    async = require('async');\n\nconst createPeers = require('./createPeers'),\n    runTest = require('./runTest');\n\nrunTest(__filename, configuration => {\n  return done => {\n    createPeers({ count: configuration.ringSize, serviceInterval: configuration.serviceInterval }, (err, peers, env) => {\n      assert.that(err).is.null();\n      async.series([\n        function (callback) {\n          env.waitUntil(peers, { interval: configuration.serviceInterval }).have('status').equalTo({ status: 'lonely' }, callback);\n        },\n        function (callback) {\n          env.formRing(peers, callback);\n        },\n        function (callback) {\n          env.waitUntil(peers, { interval: configuration.serviceInterval }).have('status').equalTo({ status: 'joined' }, callback);\n        },\n        function (callback) {\n          env.isRing(peers, callback);\n        },\n        function (callback) {\n          env.stop(peers, callback);\n        }\n      ], done);\n    });\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/integration/join-sequential.js":"'use strict';\n\nconst assert = require('assertthat'),\n    async = require('async');\n\nconst createPeers = require('./createPeers'),\n    runTest = require('./runTest');\n\nrunTest(__filename, configuration => {\n  return done => {\n    createPeers({ count: configuration.ringSize, serviceInterval: configuration.serviceInterval }, (err, peers, env) => {\n      assert.that(err).is.null();\n      async.series([\n        callback => {\n          env.waitUntil(peers, { interval: configuration.serviceInterval }).have('status').equalTo({ status: 'lonely' }, callback);\n        },\n        callback => {\n          const peersJoined = [];\n\n          async.eachSeries(peers, (peer, callbackEachSeries) => {\n            peersJoined.push(peer);\n            if (peersJoined.length === 1) {\n              return callbackEachSeries(null);\n            }\n            async.series([\n              callbackSeries => {\n                peer.join(peersJoined[0], callbackSeries);\n              },\n              callbackSeries => {\n                env.waitUntil(peersJoined, { interval: configuration.serviceInterval }).have('status').equalTo({ status: 'joined' }, callbackSeries);\n              },\n              callbackSeries => {\n                env.isRing(peersJoined, callbackSeries);\n              }\n            ], callbackEachSeries);\n          }, callback);\n        },\n        callback => {\n          env.stop(peers, callback);\n        }\n      ], done);\n    });\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/integration/leave-sequential.js":"'use strict';\n\nconst _ = require('lodash'),\n    assert = require('assertthat'),\n    async = require('async'),\n    parse = require('parse-duration');\n\nconst createPeers = require('./createPeers'),\n    runTest = require('./runTest');\n\nrunTest(__filename, configuration => {\n  return done => {\n    createPeers({ count: configuration.ringSize, serviceInterval: configuration.serviceInterval }, (err, peers, env) => {\n      const peersJoined = _.clone(peers);\n\n      assert.that(err).is.null();\n      async.series([\n        callback => {\n          env.waitUntil(peers, { interval: configuration.serviceInterval }).have('status').equalTo({ status: 'lonely' }, callback);\n        },\n        callback => {\n          env.formRing(peers, callback);\n        },\n        callback => {\n          env.waitUntil(peers, { interval: configuration.serviceInterval }).have('status').equalTo({ status: 'joined' }, callback);\n        },\n        callback => {\n          env.isRing(peers, callback);\n        },\n        callback => {\n          async.eachSeries(peers, (peer, callbackEachSeries) => {\n            if (peersJoined.length < 3) {\n              return callbackEachSeries(null);\n            }\n            _.remove(peersJoined, peer);\n            async.series([\n              callbackSeries => {\n                peer.stop(callbackSeries);\n              },\n              callbackSeries => {\n                setTimeout(callbackSeries, parse(configuration.serviceInterval) * 1.5);\n              },\n              callbackSeries => {\n                env.waitUntil(peersJoined, { interval: configuration.serviceInterval }).have('status').equalTo({ status: 'joined' }, callbackSeries);\n              },\n              callbackSeries => {\n                env.isRing(peersJoined, callbackSeries);\n              }\n            ], callbackEachSeries);\n          }, callback);\n        },\n        callback => {\n          env.stop(peersJoined, callback);\n        }\n      ], done);\n    });\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/integration/runTest.js":"'use strict';\n\nconst path = require('path');\n\nconst parse = require('parse-duration');\n\nconst algorithms = require('./algorithms'),\n    configuration = require('./configuration.json');\n\nconst runTest = function (testName, callback) {\n  testName = path.basename(testName, '.js');\n\n  const ringSizes = algorithms[configuration.ringSizes.algorithm](configuration.ringSizes.iterations);\n\n  ringSizes.forEach(ringSize => {\n    const individualConfiguration = {\n      serviceInterval: configuration.serviceInterval,\n      ringSize,\n      timeout: configuration.timeout\n    };\n\n    const testFunction = callback(individualConfiguration);\n\n    suite(testName, function () {\n      /* eslint-disable no-process-env  */\n      process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n      /* eslint-enable no-process-env  */\n\n      this.timeout(parse(configuration.timeout));\n      test('ringSize ' + ringSize, testFunction);\n    });\n  });\n};\n\nmodule.exports = runTest;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/integration/algorithms/index.js":"'use strict';\n\nmodule.exports = {\n  fibonacci: require('./fibonacci')\n};\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/integration/algorithms/fibonacci.js":"'use strict';\n\nconst fibonacci = function (iterations) {\n  const result = [ 1, 1 ];\n\n  for (let i = 2; i < (iterations + 2); i++) {\n    result[i] = result[i - 1] + result[i - 2];\n  }\n\n  return result.slice(2);\n};\n\nmodule.exports = fibonacci;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/integration/createPeers/createPeer.js":"'use strict';\n\nconst freeport = require('freeport');\n\nconst Peer = require('./Peer');\n\nconst createPeer = function (options, callback) {\n  freeport((errFreeport, port) => {\n    if (errFreeport) {\n      return callback(errFreeport);\n    }\n\n    const peer = new Peer({\n      port,\n      serviceInterval: options.serviceInterval\n    });\n\n    peer.start(errStart => {\n      if (errStart) {\n        return callback(errStart);\n      }\n      callback(null, peer);\n    });\n  });\n};\n\nmodule.exports = createPeer;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/integration/createPeers/getDockWorker.js":"'use strict';\n\nconst fs = require('fs'),\n    path = require('path'),\n    url = require('url');\n\nconst crew = require('crew');\n\nlet instance;\n\nconst getDockWorker = function (callback) {\n  if (instance) {\n    return process.nextTick(() => {\n      callback(null, instance);\n    });\n  }\n\n  crew({\n    /* eslint-disable no-process-env */\n    host: url.parse(process.env.DOCKER_HOST).hostname,\n    port: url.parse(process.env.DOCKER_HOST).port,\n    keys: {\n      privateKey: fs.readFileSync(path.join(process.env.DOCKER_CERT_PATH, 'key.pem')),\n      certificate: fs.readFileSync(path.join(process.env.DOCKER_CERT_PATH, 'cert.pem')),\n      caCertificate: fs.readFileSync(path.join(process.env.DOCKER_CERT_PATH, 'ca.pem'))\n    }\n    /* eslint-enable no-process-env */\n  }, (errCrew, dockWorker) => {\n    if (errCrew) {\n      return callback(errCrew);\n    }\n\n    dockWorker.ping(errPing => {\n      if (errPing) {\n        return callback(errPing);\n      }\n\n      instance = dockWorker;\n      return callback(null, instance);\n    });\n  });\n};\n\nmodule.exports = getDockWorker;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/samples/minimal/app.js":"'use strict';\n\nconst fs = require('fs'),\n    path = require('path');\n\nconst p2p = require('../../lib/p2p');\n\n/* eslint-disable no-process-env  */\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n/* eslint-enable no-process-env  */\n\np2p.peer({\n  /* eslint-disable no-process-env */\n  host: process.env.HOST,\n  port: process.env.PORT,\n  privateKey: fs.readFileSync(path.join(__dirname, '..', '..', 'keys', 'localhost.selfsigned', 'privateKey.pem')),\n  certificate: fs.readFileSync(path.join(__dirname, '..', '..', 'keys', 'localhost.selfsigned', 'certificate.pem')),\n  serviceInterval: process.env.SERVICE_INTERVAL\n  /* eslint-enable no-process-env */\n});\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/samples/worker/client.js":"'use strict';\n\nconst url = require('url');\n\nconst flaschenpost = require('flaschenpost'),\n    processEnv = require('processenv'),\n    request = require('request'),\n    uuid = require('uuidv4');\n\nconst logger = flaschenpost.getLogger();\n\nconst port = processEnv('PORT') || 3000;\n\nconst job = {\n  id: process.argv[2] || uuid(),\n  data: process.argv[3] || 'foo'\n};\n\nrequest.post(url.format({\n  protocol: 'http',\n  hostname: 'localhost',\n  port,\n  pathname: '/job'\n}), {\n  body: { value: job.id, data: job.data },\n  json: true\n}, (err, res) => {\n  if (err || (res.statusCode !== 200)) {\n    logger.fatal('Failed to send job.', err);\n    /* eslint-disable no-process-exit */\n    process.exit(1);\n    /* eslint-enable no-process-exit */\n  }\n\n  const target = res.body.endpoint;\n\n  logger.info(`Sent job ${job.id} to ${target.host}:${target.port}.`, { job, target });\n});\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/samples/worker/server-1.js":"'use strict';\n\nconst server = require('./serverBase');\n\nserver.run({\n  http: {\n    port: 3000\n  },\n  p2p: {\n    port: 3001,\n    portJoin: 4001\n  },\n  serviceInterval: '1s'\n});\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/samples/worker/serverBase.js":"'use strict';\n\nconst fs = require('fs'),\n    http = require('http'),\n    path = require('path');\n\nconst bodyParser = require('body-parser'),\n    express = require('express'),\n    flaschenpost = require('flaschenpost');\n\nconst p2p = require('../../lib/p2p');\n\nconst serverBase = {};\n\nserverBase.run = function (options) {\n  const logger = flaschenpost.getLogger();\n\n  const certificate = fs.readFileSync(path.join(__dirname, '..', '..', 'keys', 'localhost.selfsigned', 'certificate.pem')),\n      privateKey = fs.readFileSync(path.join(__dirname, '..', '..', 'keys', 'localhost.selfsigned', 'privateKey.pem'));\n\n  /* eslint-disable no-process-env */\n  process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n  /* eslint-enable no-process-env */\n\n  const peer = p2p.peer({\n    host: 'localhost',\n    port: options.p2p.port,\n    privateKey,\n    certificate,\n    metadata: {\n      host: 'localhost',\n      port: options.http.port\n    },\n    wellKnownPeers: [\n      { host: 'localhost', port: options.p2p.portJoin }\n    ],\n    serviceInterval: options.serviceInterval\n  });\n\n  peer.on('status::*', status => {\n    logger.info('Changed status.', status);\n  });\n\n  peer.on('environment::successor', successor => {\n    logger.info('Changed successor.', { successor });\n  });\n\n  peer.on('environment::predecessor', predecessor => {\n    logger.info('Changed predecessor.', { predecessor });\n  });\n\n  peer.handle.process = function (payload, done) {\n    logger.info('Processing job.', payload);\n    done(null, {\n      endpoint: peer.self\n    });\n  };\n\n  const app = express();\n\n  app.use(bodyParser.json());\n\n  app.post('/job', (req, res) => {\n    peer.getPeerFor(req.body.value, (errGetPeerFor, node) => {\n      if (errGetPeerFor) {\n        return res.sendStatus(500);\n      }\n      peer.remote(node).run('process', req.body, (err, result) => {\n        if (err) {\n          return res.sendStatus(500);\n        }\n        res.send(result);\n      });\n    });\n  });\n\n  http.createServer(app).listen(options.http.port);\n};\n\nmodule.exports = serverBase;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/samples/worker/server-2.js":"'use strict';\n\nconst server = require('./serverBase');\n\nserver.run({\n  http: {\n    port: 4000\n  },\n  p2p: {\n    port: 4001,\n    portJoin: 3001\n  },\n  serviceInterval: '1s'\n});\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/samples/worker/server-3.js":"'use strict';\n\nconst server = require('./serverBase');\n\nserver.run({\n  http: {\n    port: 5000\n  },\n  p2p: {\n    port: 5001,\n    portJoin: 3001\n  },\n  serviceInterval: '1s'\n});\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/integration/createPeers/env/formRing.js":"'use strict';\n\nconst async = require('async'),\n    flaschenpost = require('flaschenpost');\n\nconst logger = flaschenpost.getLogger();\n\nconst formRing = function (peers, callback) {\n  logger.info('Forming ring...');\n  async.each(peers, (peer, done) => {\n    peer.join(peers[0], done);\n  }, callback);\n};\n\nmodule.exports = formRing;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/integration/createPeers/env/isRing.js":"'use strict';\n\nconst _ = require('lodash'),\n    async = require('async'),\n    flaschenpost = require('flaschenpost');\n\nconst logger = flaschenpost.getLogger();\n\nconst isRing = function (peers, callback) {\n  const peersWithNeighbours = [];\n\n  const getPeerIndex = function (self) {\n    if (!self) {\n      return -1;\n    }\n\n    return _.findIndex(peersWithNeighbours, function (peerWithNeighbours) {\n      return (\n        peerWithNeighbours.self.host === self.host &&\n        peerWithNeighbours.self.port === self.port\n      );\n    });\n  };\n\n  logger.info('Verifying ring...');\n\n  async.eachSeries(peers, (peer, doneEach) => {\n    async.series({\n      self: done => {\n        peer.self(done);\n      },\n      successor: done => {\n        peer.successor(done);\n      },\n      predecessor: done => {\n        peer.predecessor(done);\n      }\n    }, (err, peerWithNeighbours) => {\n      if (err) {\n        return doneEach(err);\n      }\n      peersWithNeighbours.push(peerWithNeighbours);\n      doneEach(null);\n    });\n  }, err => {\n    if (err) {\n      return callback(err);\n    }\n\n    peersWithNeighbours.forEach(peerWithNeighbours => {\n      peerWithNeighbours.successor = getPeerIndex(peerWithNeighbours.successor);\n      peerWithNeighbours.predecessor = getPeerIndex(peerWithNeighbours.predecessor);\n    });\n\n    const predecessors = _.uniq(_.pluck(peersWithNeighbours, 'predecessor').sort(), true),\n        successors = _.uniq(_.pluck(peersWithNeighbours, 'successor').sort(), true);\n\n    if (predecessors[0] !== 0 || predecessors.length !== peers.length) {\n      return callback(new Error('Predecessors are broken.'));\n    }\n    if (successors[0] !== 0 || successors.length !== peers.length) {\n      return callback(new Error('Successors are broken.'));\n    }\n\n    callback(null);\n  });\n};\n\nmodule.exports = isRing;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/integration/createPeers/env/stop.js":"'use strict';\n\nconst async = require('async'),\n    flaschenpost = require('flaschenpost');\n\nconst logger = flaschenpost.getLogger();\n\nconst stop = function (peers, callback) {\n  logger.info('Stopping peers...');\n  async.each(peers, (peer, done) => {\n    peer.stop(done);\n  }, callback);\n};\n\nmodule.exports = stop;\n","/home/travis/build/npmtest/node-npmtest-p2p/node_modules/p2p/integration/createPeers/env/waitUntil.js":"'use strict';\n\nconst async = require('async'),\n    cmp = require('comparejs'),\n    flaschenpost = require('flaschenpost'),\n    parse = require('parse-duration');\n\nconst logger = flaschenpost.getLogger();\n\nconst waitUntil = function (peers, options) {\n  return {\n    have: fn => {\n      return {\n        equalTo: (expected, callback) => {\n          logger.info('Waiting for peers to fulfill predicate...', { expected });\n\n          async.each(peers, (peer, doneEach) => {\n            let actual;\n\n            async.until(\n              () => {\n                return cmp.eq(actual, expected);\n              },\n              doneUntil => {\n                peer[fn]((err, result) => {\n                  if (err) {\n                    return doneUntil(err);\n                  }\n                  actual = result;\n                  setTimeout(() => {\n                    doneUntil(null);\n                  }, parse(options.interval));\n                });\n              },\n              doneEach\n            );\n          }, callback);\n        }\n      };\n    }\n  };\n};\n\nmodule.exports = waitUntil;\n"}